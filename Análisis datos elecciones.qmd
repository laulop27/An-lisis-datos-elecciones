---
title: "Entrega grupal"
author: "Laura López (05977509-Q), Cristina Martínez (54023153-V), Marta Calderón (06639048-Y), Marina Parra (54216596-F), Verónica Yebra (02783997-P), Maria Suárez (51191582-E), Julia García (49959082-T)"
format:
  revealjs:
    theme: [style.scss]
    embed-resources: true
execute: 
  echo: true
---

## Análisis datos elecciones

```{r}
rm(list = ls())
library(tidyverse)

```

```{r}
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv") #archivo con las elecciones al congreso
cod_mun <- read_csv(file = "./data/cod_mun.csv") #archivo con los códigos y nombres de cada municipio
surveys <- read_csv(file = "./data/historical_surveys.csv") #siglas de cada partido
abbrev <- read_csv(file = "./data/siglas.csv") #encuestas electorales desde 1982.
```

------------------------------------------------------------------------

## 1. Depuración del conjunto *election_data*

Primeramente vamos a depurar y trabajar con el conjunto *election_data*. Esto conlleva la organización de los datos, comprobación que el tipo de dato de cada variable sea el adecuado, manejo de los ausentes, etc.

```{r}
election_data_tidy <-
  election_data |> 
  pivot_longer(cols = -c(tipo_eleccion:votos_nulos),
               names_to = "partidos", values_to = "votos",
               values_drop_na = TRUE) |> 
  # tenemos algunas lógicas que deberían ser números
  mutate(across(where(is.logical), as.numeric))

election_data_tidy
```

------------------------------------------------------------------------

Como sabemos, en estadística información = varianza por tanto hay variables que debemos eliminar y para ello primero observamos la cantidad de valores distintos que hay en cada variable para después eliminar aquellas que presenten valores constantes, es decir, que el número de valores distintos sea igual a uno.

En este caso, estas variables son tipo_elección, vuelta y codigo_distrito_electoral.

Además, vamos a añadir una variable fecha considerando que todas las elecciones han sido realizadas el 1 de enero

```{r}
#1º Sacamos los valores distintos de cada variable
n_dist <-
  election_data_tidy |> 
  summarise(across(everything(), n_distinct)) #recorremos todas las variables y sacamos los valores distintos
n_dist

#2º Seleccionamos todas las variables menos las que no nos aportaban información
election_data_tidy <-
  election_data_tidy |> 
  select(-c(tipo_eleccion, vuelta, codigo_distrito_electoral))
election_data_tidy

#3º Añadimos la variable fecha
library(glue)
election_data_tidy <-
  election_data_tidy |> 
  mutate("fecha" = as_date(glue("{anno}-{mes}-01")), .before = everything()) |> 
  select(-anno, -mes)
election_data_tidy
```

------------------------------------------------------------------------

Ahora vamos a crear la variable id para poder realizar de manera más rápida y eficiente el borrado de duplicados por municipio, fecha electoral y partido

```{r}
election_data_tidy <-
  election_data_tidy |> 
  mutate("id_mun" = glue("{codigo_ccaa}_{codigo_provincia}_{codigo_municipio}"),
         "id_elec" = glue("{fecha}_{id_mun}"), .after = fecha) |> 
  mutate("id_result" = glue("{id_elec}_{partidos}"), .before = everything()) |> 
  distinct(id_result, .keep_all = TRUE)
election_data_tidy
```

------------------------------------------------------------------------

Además, necesitamos seleccionar sólo aquellos partidos que nos nos interesan. Pero para ello debemos tener en cuenta que hay partido que tienen o tenían federaciones, sucursales con otros nombres por lo que es necesario recategorizarlos

```{r}
abbrev
election_data_tidy <- 
  election_data_tidy |> 
  left_join(abbrev, by = c("partidos"="denominacion")) |> 
  mutate(siglas = str_to_upper(siglas))
  
election_data_tidy <-
  election_data_tidy |> 
  mutate("votos" = sum(votos, na.rm = TRUE), .by = c(id_elec, siglas)) |> 
  distinct(id_elec, siglas, .keep_all = TRUE)
election_data_tidy
```

```{r}
election_data_tidy <- 
  election_data_tidy |> 
  mutate(siglas = str_replace_all(siglas, "\\.", ""))
election_data_tidy
```

```{r}
election_data_tidy <- 
  election_data_tidy |> 
  mutate(siglas = str_replace_all(siglas, "\\,|\\'", ""))
election_data_tidy
```

```{r}
election_data_tidy |> 
  distinct(siglas)
```

```{r}
election_data_tidy <- 
  election_data_tidy |> 
  mutate(siglas = ifelse(str_detect(siglas, "PAÍS"), "MP", siglas))
election_data_tidy
```

```{r}
election_data_tidy <- 
  election_data_tidy |>
  mutate("siglas" =
           case_when(str_detect(siglas, "PSOE") ~ "PSOE",
                     str_detect(siglas, "PP") ~ "PP",
                     str_detect(siglas, "CS") ~ "CS",
                     str_detect(siglas, "PNV") ~ "PNV",
                     str_detect(siglas, "BNG") ~ "BNG",
                     str_detect(siglas, "PODEMOS") ~ "PODEMOS",
                     str_detect(siglas, "ERC|ESQUERRA") ~ "ERC",
                     str_detect(siglas, "BILDU") ~ "BILDU",
                     str_detect(siglas, "MP") ~ "MP",
                     str_detect(siglas, "VOX") ~ "VOX",
                     str_detect(siglas, "CIU") ~ "CIU",
                     TRUE ~ "OTROS"))
```

## 2. Depuración del conjunto *surveys*

Debes descartar las encuestas que: - se refieran a elecciones anteriores a 2008 - sean a pie de urna - tamaño muestral desconocido o inferior a 500. - tenga 1 día o menos de trabajo de campo.

```{r}
surveys <- surveys |> 
  filter(year(date_elec) >= 2008 & 
           exit_poll == FALSE &
           size > 500 &
           as.numeric(difftime(field_date_to, field_date_from, units = "days")) > 1) |> 
  drop_na(size)
surveys
```

```{r}
surveys_tidy <- 
surveys |> 
  pivot_longer(cols = -c(1:10),
               names_to = "partidos",
               values_to = "votos",
               values_drop_na = TRUE)
surveys_tidy
```
